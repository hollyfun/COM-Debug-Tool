import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import serial
import serial.tools.list_ports
from sv_ttk import set_theme
import threading

class LightSerialApp:
    def __init__(self, master):
        self.master = master
        self.serial_port = None
        self.listen_port = None  # 新增监听端口对象
        master.title("串口调试工具")
        master.geometry("860x620")  # 调整窗口大小
        set_theme("light")
        
        # 自定义颜色方案
        self.bg_color = "#FFFFFF"
        self.accent_color = "#2563EB"
        self.text_color = "#1F2937"
        self.input_bg = "#F3F4F6"
        self.success_green = "#10B981"
        self.error_red = "#EF4444"
        
        # 配置主窗口
        master.configure(bg=self.bg_color)
        self.style = ttk.Style()
        self.style.configure("TButton", padding=6, font=("Segoe UI", 9))
        self.style.map("TButton", background=[("active", "#3B82F6")])
        
        # 状态变量
        self.connected = False
        self.listening = False  # 新增监听状态
        self.sending = False
        self.interval = 1000
        self.connection_status = tk.StringVar(value="等待连接...")
        self.listen_status = tk.StringVar(value="监听未启动")  # 新增监听状态
        self.port_var = tk.StringVar()
        self.listen_port_var = tk.StringVar()  # 新增监听端口变量
        self.baud_var = tk.StringVar(value="9600")
        self.listen_baud_var = tk.StringVar(value="9600")  # 新增监听波特率
        self.source_var = tk.StringVar(value="指令窗口1")

        # 创建界面组件
        self.create_header()
        self.create_config_area()
        self.create_command_panel()
        self.create_timing_controls()
        self.create_listen_panel()  # 新增监听面板
        self.refresh_ports()

    def create_header(self):
        header_frame = ttk.Frame(self.master)
        header_frame.pack(fill="x", padx=12, pady=(12, 5))
        
        # 发送状态指示灯
        self.status_light = tk.Canvas(header_frame, width=24, height=24, bd=0, highlightthickness=0)
        self.status_light.create_oval(4, 4, 20, 20, fill="#9CA3AF", outline="")
        self.status_light.pack(side="left", padx=5)
        
        # 监听状态指示灯
        self.listen_light = tk.Canvas(header_frame, width=24, height=24, bd=0, highlightthickness=0)
        self.listen_light.create_oval(4, 4, 20, 20, fill="#9CA3AF", outline="")
        self.listen_light.pack(side="left", padx=5)
        
        # 状态显示
        ttk.Label(header_frame, textvariable=self.connection_status, 
                font=("Segoe UI", 10), foreground="#4B5563").pack(side="left", padx=5)
        ttk.Label(header_frame, textvariable=self.listen_status,
                font=("Segoe UI", 10), foreground="#4B5563").pack(side="left", padx=5)

    def create_config_area(self):
        config_frame = ttk.Frame(self.master)
        config_frame.pack(fill="x", padx=12, pady=5)
        
        # 发送端口配置
        send_frame = ttk.LabelFrame(config_frame, text=" 发送配置 ", padding=5)
        send_frame.pack(side="left", padx=5)
        
        ttk.Label(send_frame, text="发送端口", foreground="#6B7280").grid(row=0, column=0, sticky="w")
        self.port_combo = ttk.Combobox(send_frame, textvariable=self.port_var, width=14)
        self.port_combo.grid(row=1, column=0, pady=2)
        
        ttk.Label(send_frame, text="波特率", foreground="#6B7280").grid(row=0, column=1, sticky="w", padx=5)
        ttk.Combobox(send_frame, textvariable=self.baud_var, 
                   values=["9600", "115200", "57600", "38400"], width=10).grid(row=1, column=1, padx=5)
        
        self.connect_btn = ttk.Button(send_frame, text="连接设备", 
                                    command=self.toggle_connection, style="Accent.TButton")
        self.connect_btn.grid(row=1, column=2, padx=5)

        # 监听端口配置
        listen_frame = ttk.LabelFrame(config_frame, text=" 监听配置 ", padding=5)
        listen_frame.pack(side="left", padx=15)
        
        ttk.Label(listen_frame, text="监听端口", foreground="#6B7280").grid(row=0, column=0, sticky="w")
        self.listen_port_combo = ttk.Combobox(listen_frame, textvariable=self.listen_port_var, width=14)
        self.listen_port_combo.grid(row=1, column=0, pady=2)
        
        ttk.Label(listen_frame, text="波特率", foreground="#6B7280").grid(row=0, column=1, sticky="w", padx=5)
        ttk.Combobox(listen_frame, textvariable=self.listen_baud_var, 
                   values=["9600", "115200", "57600", "38400"], width=10).grid(row=1, column=1, padx=5)
        
        self.listen_btn = ttk.Button(listen_frame, text="启动监听", 
                                   command=self.toggle_listen, style="Accent.TButton")
        self.listen_btn.grid(row=1, column=2, padx=5)

        # 刷新按钮
        ttk.Button(config_frame, text="刷新所有端口", command=self.refresh_ports).pack(side="right", padx=5)

    def create_command_panel(self):
        panel = ttk.Frame(self.master)
        panel.pack(fill="both", expand=True, padx=12, pady=5)
        
        # 指令窗口1
        cmd1_frame = ttk.LabelFrame(panel, text=" 常用指令 1 ", padding=(10, 5))
        cmd1_frame.pack(side="left", fill="both", expand=True, padx=3)
        self.cmd1_entry = tk.Text(cmd1_frame, height=6, width=25, bg=self.input_bg,
                                fg=self.text_color, insertbackground=self.text_color, 
                                wrap=tk.WORD, relief="solid", borderwidth=1)
        self.cmd1_entry.pack(pady=3, fill="both", expand=True)
        ttk.Button(cmd1_frame, text="发送指令", command=lambda: self.send_data(1)).pack(pady=3)
        
        # 指令窗口2
        cmd2_frame = ttk.LabelFrame(panel, text=" 常用指令 2 ", padding=(10, 5))
        cmd2_frame.pack(side="right", fill="both", expand=True, padx=3)
        self.cmd2_entry = tk.Text(cmd2_frame, height=6, width=25, bg=self.input_bg,
                                fg=self.text_color, insertbackground=self.text_color,
                                wrap=tk.WORD, relief="solid", borderwidth=1)
        self.cmd2_entry.pack(pady=3, fill="both", expand=True)
        ttk.Button(cmd2_frame, text="发送指令", command=lambda: self.send_data(2)).pack(pady=3)

    def create_timing_controls(self):
        timing_frame = ttk.Frame(self.master)
        timing_frame.pack(fill="x", padx=12, pady=(5, 12))
        
        ttk.Label(timing_frame, text="发送间隔（ms）:", foreground="#6B7280").pack(side="left")
        self.interval_entry = ttk.Entry(timing_frame, width=8)
        self.interval_entry.insert(0, "1000")
        self.interval_entry.pack(side="left", padx=5)
        
        ttk.Label(timing_frame, text="指令来源:", foreground="#6B7280").pack(side="left", padx=10)
        ttk.Combobox(timing_frame, textvariable=self.source_var, 
                   values=["指令窗口1", "指令窗口2"], width=12).pack(side="left")
        
        self.timing_btn = ttk.Button(timing_frame, text="开始定时", command=self.toggle_timing)
        self.timing_btn.pack(side="right", padx=5)

    def create_listen_panel(self):
        """新增的监听数据显示面板"""
        panel = ttk.LabelFrame(self.master, text=" 串口数据监听 ", padding=10)
        panel.pack(fill="both", expand=True, padx=12, pady=5)
        
        # 带滚动条的文本框
        self.listen_text = scrolledtext.ScrolledText(
            panel,
            wrap=tk.WORD,
            height=8,
            bg=self.input_bg,
            fg=self.text_color,
            insertbackground=self.text_color,
            state="normal"
        )
        self.listen_text.pack(fill="both", expand=True)
        
        # 清空按钮
        ttk.Button(panel, text="清空显示", command=self.clear_listen).pack(side="right", pady=3)

    def refresh_ports(self):
        ports = [port.device for port in serial.tools.list_ports.comports()]
        self.port_combo["values"] = ports
        self.listen_port_combo["values"] = ports
        if ports:
            if not self.port_var.get():
                self.port_var.set(ports[0])
            if not self.listen_port_var.get():
                self.listen_port_var.set(ports[0] if len(ports)<2 else ports[1])
            self.status_light.itemconfig(1, fill="#3B82F6")
            self.connection_status.set("就绪 - 选择端口后连接")
        else:
            self.status_light.itemconfig(1, fill="#DC2626")
            self.connection_status.set("未检测到可用端口")

    def toggle_connection(self):
        if not self.connected:
            self.connect_serial()
        else:
            self.disconnect_serial()

    def connect_serial(self):
        try:
            self.serial_port = serial.Serial(
                port=self.port_var.get(),
                baudrate=int(self.baud_var.get()),
                timeout=1
            )
            self.connected = True
            self.connect_btn.config(text="断开连接")
            self.connection_status.set(f"已连接: {self.port_var.get()}")
            self.status_light.itemconfig(1, fill=self.success_green)
        except Exception as e:
            messagebox.showerror("连接错误", f"发送端口连接失败: {str(e)}")

    def disconnect_serial(self):
        if self.serial_port and self.serial_port.is_open:
            self.serial_port.close()
        self.connected = False
        self.connect_btn.config(text="连接设备")
        self.connection_status.set("发送连接已断开")
        self.status_light.itemconfig(1, fill=self.error_red)

    def send_data(self, window_num):
        if not self.connected:
            messagebox.showwarning("警告", "请先连接发送端口")
            return

        text_widget = self.cmd1_entry if window_num == 1 else self.cmd2_entry
        data = text_widget.get("1.0", "end-1c")
        if data:
            try:
                self.serial_port.write(data.encode("utf-8"))
            except Exception as e:
                messagebox.showerror("发送错误", f"指令发送失败: {str(e)}")
                self.disconnect_serial()

    def toggle_timing(self):
        if not self.sending:
            self.start_timing()
        else:
            self.stop_timing()

    def start_timing(self):
        if not self.connected:
            messagebox.showwarning("警告", "请先连接发送端口")
            return

        try:
            self.interval = int(self.interval_entry.get())
            if self.interval < 50:
                raise ValueError
        except:
            messagebox.showerror("错误", "请输入有效的间隔时间（≥50ms）")
            return

        self.sending = True
        self.timing_btn.config(text="停止定时")
        self.do_timing_send()

    def stop_timing(self):
        self.sending = False
        self.timing_btn.config(text="开始定时")

    def do_timing_send(self):
        if self.sending:
            window_num = 1 if self.source_var.get() == "指令窗口1" else 2
            self.send_data(window_num)
            self.master.after(self.interval, self.do_timing_send)

    def toggle_listen(self):
        """切换监听状态"""
        if not self.listening:
            self.start_listen()
        else:
            self.stop_listen()

    def start_listen(self):
        """启动监听线程"""
        try:
            if self.listen_port_var.get() == self.port_var.get():
                messagebox.showwarning("警告", "监听端口不能与发送端口相同")
                return

            self.listen_port = serial.Serial(
                port=self.listen_port_var.get(),
                baudrate=int(self.listen_baud_var.get()),
                timeout=1
            )
            self.listening = True
            self.listen_btn.config(text="停止监听")
            self.listen_status.set(f"监听中: {self.listen_port_var.get()}")
            self.listen_light.itemconfig(1, fill=self.success_green)
            
            # 启动监听线程
            self.listen_thread = threading.Thread(target=self.listen_serial, daemon=True)
            self.listen_thread.start()
        except Exception as e:
            messagebox.showerror("监听错误", f"无法启动监听: {str(e)}")

    def stop_listen(self):
        """停止监听"""
        if self.listen_port and self.listen_port.is_open:
            self.listen_port.close()
        self.listening = False
        self.listen_btn.config(text="启动监听")
        self.listen_status.set("监听已停止")
        self.listen_light.itemconfig(1, fill=self.error_red)

    def listen_serial(self):
        """监听串口数据的线程函数"""
        while self.listening and self.listen_port.is_open:
            try:
                if self.listen_port.in_waiting > 0:
                    data = self.listen_port.read(self.listen_port.in_waiting)
                    self.update_listen_text(data.decode("utf-8", errors="replace"))
            except Exception as e:
                self.master.after(0, lambda: messagebox.showerror("监听错误", f"数据读取失败: {str(e)}"))
                self.master.after(0, self.stop_listen)
                break

    def update_listen_text(self, text):
        """线程安全更新监听显示"""
        self.master.after(0, lambda: self._append_listen_text(text))

    def _append_listen_text(self, text):
        """实际更新文本框内容"""
        self.listen_text.configure(state="normal")
        self.listen_text.insert("end", text)
        self.listen_text.see("end")
        self.listen_text.configure(state="disabled")

    def clear_listen(self):
        """清空监听显示"""
        self.listen_text.configure(state="normal")
        self.listen_text.delete(1.0, "end")
        self.listen_text.configure(state="disabled")

if __name__ == "__main__":
    root = tk.Tk()
    app = LightSerialApp(root)
    root.mainloop()
